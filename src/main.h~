//
// Created by l on 14.09.18.
//

#ifndef NAVI_LUEBECK_MAIN_H
#define NAVI_LUEBECK_MAIN_H

struct Point {
    int x;
    int y;
};

class Main {
private:
    std::map<int, Node> nodes;

    double min_latitude;
    double max_latitude;
    double min_longitude;
    double max_longitude;

    int width;
    int height;

    std::list<int> route;

    Gtk::TreeModel::ColumnRecord columns;
    Gtk::TreeModelColumn<Glib::ustring> name_column;
    Gtk::TreeModelColumn<Node*> node_column;
    Gtk::ComboBox from_combo_box;
    Gtk::Label from_label;
    Gtk::ComboBox to_combo_box;
    Gtk::Label to_label;
    Gtk::Box combo_box_box;
    Gtk::Label map_label;
    Gtk::DrawingArea drawing_area;
    Gtk::Box result_box;
    Gtk::Paned result_paned;
    Gtk::TreeView route_tree_view;
    Gtk::TreeModel::ColumnRecord route_columns;
    Gtk::TreeModelColumn<Glib::ustring> route_node_name_column;
    Gtk::TreeModelColumn<int> route_node_distance_column;
    Gtk::TreeModelColumn<int> route_node_length_column;
    Glib::RefPtr<Gtk::ListStore> route_tree_model;

    void fill_store(Glib::RefPtr<Gtk::ListStore> store) {
        for (auto& pair : nodes) {
            auto &node = pair.second;
            auto row = *(store->append());
            row[name_column] = node.name;
            row[node_column] = &node;
        }
    }

    bool on_draw(const Cairo::RefPtr<Cairo::Context>& context) {
        auto allocation = drawing_area.get_allocation();
        width = allocation.get_width();
        height = allocation.get_height();

        calculate_route();
        fill_route_tree_model();

        draw_edges(context);
        draw_nodes(context);
        draw_node_names(context);
        return true;
    }

    void fill_route_tree_model () {
        route_tree_model->clear ();
        if (route.empty()) {
            return;
        }
        int prior_id = *route.begin();
        int distance = 0;
        int i = 1;
        for (int id : route) {
            auto row = *(route_tree_model->append());
            int length = 0;
            auto &node = nodes[id];
            if (prior_id != id) {
                auto &prior_node = nodes[prior_id];
                for (auto &edge : prior_node.edges) {
                    if (edge.to == id) {
                        distance += edge.distance;
                        length = edge.distance;
                    }
                }
            }
            row[route_node_name_column] = std::to_string(i) + " - " + node.name;
            row[route_node_distance_column] = distance;
            row[route_node_length_column] = length;
            prior_id = id;
            i++;
        }
    }

    void calculate_route() {
        Node* from_node = nullptr;
        Node* to_node = nullptr;

        route.clear();

        get_selected_nodes(from_node, to_node);

        if (!from_node || !to_node) {
            return;
        }

        auto from_it = find_if (begin(nodes), end(nodes), [from_node] (auto &pair) {
            return &pair.second == from_node;
        });

        auto to_it = find_if (begin(nodes), end(nodes), [to_node] (auto &pair) {
            return &pair.second == to_node;
        });

        if ((from_it == end(nodes)) || (to_it == end(nodes))) {
            return;
        }

        int from_id = from_it->first;
        int to_id = to_it->first;

        auto predecessors = dijkstra(nodes, from_id);
        set_route (predecessors, to_id);
    }

    void get_selected_nodes(Node *&from_node, Node *&to_node) const {
        auto from_it1 = from_combo_box.get_active();
        if (from_it1) {
            Gtk::TreeModel::Row row = *from_it1;
            from_node = row[node_column];
        }

        auto to_it1 = to_combo_box.get_active();
        if (to_it1) {
            Gtk::TreeModel::Row row = *to_it1;
            to_node = row[node_column];
        }
    }

    void set_route(std::map<int, int> &predecessors, int target_id) {
        route.push_front(target_id);
        while (predecessors[target_id] != -1) {
            target_id = predecessors[target_id];
            route.push_front(target_id);
        }
    }

    using DrawObjectFunc = std::function<void(const Cairo::RefPtr<Cairo::Context>&, const Node&,
                                              const std::optional<int>&)>;

    void draw_objects (const Cairo::RefPtr<Cairo::Context> &context, DrawObjectFunc func) {
        for (auto &pair : nodes) {
            auto source_id = pair.first;
            auto &source_node = pair.second;
            auto source_pos = route_position(source_id);
            func (context, source_node, source_pos);
        }
    }

    void draw_node_names (const Cairo::RefPtr<Cairo::Context> &context) {
        draw_objects (context, [this] (auto &context, auto &node, auto &node_pos) {
            draw_node_name(context, node, node_pos);
        });
    }

    void draw_nodes(const Cairo::RefPtr<Cairo::Context> &context) {
        draw_objects (context, [this] (auto &context, auto &node, auto &node_pos) {
            draw_node(context, node, static_cast<bool> (node_pos));
        });
    }

    void draw_edges(const Cairo::RefPtr<Cairo::Context> &context) {
        draw_objects (context, [this] (auto &context, auto &source_node, auto &source_pos) {
            for (auto &edge : source_node.edges) {
                auto target_id = edge.to;
                auto &target_node = nodes[target_id];
                auto target_pos = route_position (target_id);

                draw_edge(context, source_node, target_node, source_pos && target_pos);
            }
        });
    }

    std::optional<int> route_position (int id) const {
        auto it = std::find (std::begin(route), std::end(route), id);
        if (it == std::end (route)) {
            return std::nullopt;
        }
        return 1 + std::distance (std::begin (route), it);
    }

    enum class ObjectKind {
        Node,
        Edge,
        NodeName
    };

    struct Color {
        double red;
        double green;
        double blue;
    };

    void set_color (const Cairo::RefPtr<Cairo::Context> &context, ObjectKind kind, bool on_route);
    using DrawingFunc = std::function<void(const Cairo::RefPtr<Cairo::Context> &context)>;
    void draw (const Cairo::RefPtr<Cairo::Context> &context, const DrawingFunc &func, ObjectKind kind, bool on_route) {
    void move_to (const Cairo::RefPtr<Cairo::Context> &context, const Node& node) {
    void line_to (const Cairo::RefPtr<Cairo::Context> &context, const Node& node) {
    void draw_edge(const Cairo::RefPtr<Cairo::Context> &context, const Node &source_node,
                   const Node &target_node, bool on_route) {
    void draw_node(const Cairo::RefPtr<Cairo::Context> &context, const Node &node,
                   bool on_route) {
    void draw_node_name(const Cairo::RefPtr<Cairo::Context> &context, const Node &node,
                        const std::optional<int> &route_pos) {
    double get_relative_coord (double value, double min_value, double max_value) {
    int translate_coord (double shift, double value, double length, double zoom) const {
    Point get_xy_from_coords (const Coordinates &coords) {
    static double get_latitude (const Node &node) {
    static double get_longitude (const Node &node) {
    using GetNodeValueFunc = double (*)(const Node&);
    void apply_get_node_value_func(GetNodeValueFunc func, decltype(nodes)::iterator it, double &value) {
    void find_node_minmax_values (GetNodeValueFunc func, double &min_value, double &max_value) {
    void set_minmax_values() {
    void on_combo_changed () {
    Glib::RefPtr<Gtk::ListStore> create_combo_box_model (Gtk::ComboBox &combo_box) {
    void init_label (Gtk::Label &label, const std::string &text) {
    void init () {
    void init_combo_box_box() {
    void init_route_tree_view() {
    void init_route_columns() {
    void init_columns() {

public:
    Gtk::Window window;

    Main (std::map<int, Node> nodes) : nodes(nodes) {
};

#endif //NAVI_LUEBECK_MAIN_H
